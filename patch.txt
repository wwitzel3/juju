diff --git a/provider/gce/environ_availzones.go b/provider/gce/environ_availzones.go
index b514bae..4db2a13 100644
--- a/provider/gce/environ_availzones.go
+++ b/provider/gce/environ_availzones.go
@@ -21,8 +21,16 @@ func (env *environ) AvailabilityZones() ([]common.AvailabilityZone, error) {
 
 	var result []common.AvailabilityZone
 	for _, zone := range zones {
-		zoneCopy := zone
-		result = append(result, &zoneCopy)
+		if zone.Deprecated() {
+			replacementZone, err := zone.Replacement()
+			if err != nil {
+				return nil, err
+			}
+			result = append(result, replacementZone)
+		} else {
+			zoneCopy := zone
+			result = append(result, &zoneCopy)
+		}
 	}
 	return result, nil
 }
@@ -70,14 +78,6 @@ func (env *environ) availZoneUp(name string) (*google.AvailabilityZone, error) {
 	if !zone.Available() {
 		return nil, errors.Errorf("availability zone %q is %s", zone.Name(), zone.Status())
 	}
-
-	if deprecated := zone.Deprecated(); deprecated != nil {
-		err := errors.Errorf("availability zone %q is %s", zone.Name(), deprecated.State)
-		if deprecated.Replacement != "" {
-			err = errors.Annotatef(err, "%s has been suggested as a replacement for %q", deprecated.Replacement, zone.Name())
-		}
-		return nil, err
-	}
 	return zone, nil
 }
 
diff --git a/provider/gce/environ_availzones_test.go b/provider/gce/environ_availzones_test.go
index a056a51..b73b4d4 100644
--- a/provider/gce/environ_availzones_test.go
+++ b/provider/gce/environ_availzones_test.go
@@ -40,11 +40,12 @@ func (s *environAZSuite) TestAvailabilityZones(c *gc.C) {
 func (s *environAZSuite) TestAvailabilityZonesDeprecated(c *gc.C) {
 	zone := google.NewZone("a-zone", google.StatusUp, "DEPRECATED", "b-zone")
 
-	c.Check(zone.Deprecated(), gc.Not(gc.IsNil))
+	c.Check(zone.Deprecated(), jc.IsTrue)
 
-	deprecated := zone.Deprecated()
-	c.Check(deprecated.State, gc.Equals, "DEPRECATED")
-	c.Check(deprecated.Replacement, gc.Equals, "b-zone")
+	replacement, err := zone.Replacement()
+	c.Check(err, jc.ErrorIsNil)
+	c.Check(replacement, gc.Not(gc.IsNil))
+	c.Check(replacement.Name(), gc.Equals, "b-zone")
 }
 
 func (s *environAZSuite) TestAvailabilityZonesAPI(c *gc.C) {
diff --git a/provider/gce/google/zone.go b/provider/gce/google/zone.go
index 3b3af42..eca31a8 100644
--- a/provider/gce/google/zone.go
+++ b/provider/gce/google/zone.go
@@ -5,6 +5,8 @@ package google
 
 import (
 	"code.google.com/p/google-api-go-client/compute/v1"
+
+	"github.com/juju/errors"
 )
 
 // AvailabilityZone represents a single GCE zone. It satisfies the
@@ -42,9 +44,28 @@ func (z AvailabilityZone) Status() string {
 	return z.zone.Status
 }
 
-// Deprecated returns a DeprecationStatus which will be nil if there is none.
-func (z AvailabilityZone) Deprecated() *compute.DeprecationStatus {
-	return z.zone.Deprecated
+// Deprecated returns true if the zone has been deprecated.
+func (z AvailabilityZone) Deprecated() bool {
+	if z.zone.Deprecated != nil {
+		return true
+	}
+	return false
+}
+
+// Replacement returns a potential replacment zone and any error.
+func (z AvailabilityZone) Replacement() (*AvailabilityZone, error) {
+	if z.Deprecated() {
+		if z.zone.Deprecated.Replacement != "" {
+			return &AvailabilityZone{
+				zone: &compute.Zone{
+					Name:   z.zone.Deprecated.Replacement,
+					Status: StatusUp,
+				},
+			}, nil
+		}
+		return nil, errors.Errorf("%q is %s. no replacement is available.", z.Name(), z.zone.Deprecated.State)
+	}
+	return nil, nil
 }
 
 // Available returns whether or not the zone is available for provisioning.
diff --git a/provider/gce/google/zone_test.go b/provider/gce/google/zone_test.go
index 71f2686..2c4e57a 100644
--- a/provider/gce/google/zone_test.go
+++ b/provider/gce/google/zone_test.go
@@ -46,3 +46,33 @@ func (s *zoneSuite) TestAvailabilityZoneAvailableFalse(c *gc.C) {
 	s.raw.Status = google.StatusDown
 	c.Check(s.zone.Available(), jc.IsFalse)
 }
+
+func (s *zoneSuite) TestAvailabilityZoneNotDeprecated(c *gc.C) {
+	c.Check(s.zone.Deprecated(), jc.IsFalse)
+}
+
+func (s *zoneSuite) TestAvailabilityZoneDeprecated(c *gc.C) {
+	s.raw.Deprecated = &compute.DeprecationStatus{
+		State: "DEPRECATED",
+	}
+	c.Check(s.zone.Deprecated(), jc.IsTrue)
+}
+
+func (s *zoneSuite) TestAvailabilityZoneDeprecatedNoReplacement(c *gc.C) {
+	s.raw.Deprecated = &compute.DeprecationStatus{
+		State: "DEPRECATED",
+	}
+	replacementZone, err := s.zone.Replacement()
+	c.Check(replacementZone, gc.IsNil)
+	c.Check(err, gc.ErrorMatches, ".*no replacement is available.")
+}
+
+func (s *zoneSuite) TestAvailabilityZoneDeprecatedReplacement(c *gc.C) {
+	s.raw.Deprecated = &compute.DeprecationStatus{
+		State:       "DEPRECATED",
+		Replacement: "d-zone",
+	}
+	replacementZone, err := s.zone.Replacement()
+	c.Check(replacementZone, gc.Not(gc.IsNil))
+	c.Check(err, jc.ErrorIsNil)
+}
